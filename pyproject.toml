# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

[project]
name = "spdx-verify"
dynamic = ["version"]
description = "SPDX License Header Verification Tool with dual CLI/GitHub Actions support"
authors = [
    {name = "Matthew Watkins", email = "93649628+ModeSevenIndustrialSolutions@users.noreply.github.com" },
]
dependencies = [
    "typer>=0.9.0",
    "pyyaml>=6.0",
    "pathspec>=0.11.0",
]
requires-python = ">=3.9"
readme = "README.md"
license = { text = "Apache-2.0" }
keywords = ["spdx", "license", "verification", "github-actions", "cli"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Utilities",
]

[project.urls]
Homepage = "https://github.com/lfreleng-actions/spdx-verify-action"
Repository = "https://github.com/lfreleng-actions/spdx-verify-action"
Issues = "https://github.com/lfreleng-actions/spdx-verify-action/issues"
Changelog = "https://github.com/lfreleng-actions/spdx-verify-action/blob/main/CHANGELOG.md"

[project.scripts]
spdx-verify = "spdx_verify:main"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "mypy>=1.0",
    "black>=23.0",
    "isort>=5.0",
    "pytest>=7.0",
    "pytest-cov>=4.0",
]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Exclude test files from strict type checking
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
warn_unreachable = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=spdx_verify --cov-report=term-missing --cov-report=html:tests/htmlcov --cov-config=pyproject.toml"
testpaths = [
    "tests",
]
# Ensure tests run in isolation and don't leak into the main package
python_paths = [
    ".",
]
# Filter warnings to reduce noise in test output
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
# Set minimum log level for cleaner test output
log_level = "INFO"
# Ensure tests are collected only from tests directory
collect_ignore = [
    "spdx_verify.py",
    "__pycache__",
    ".pytest_cache",
    "htmlcov",
    "test_coverage_report.html",
]

[tool.coverage.run]
# Use relative path for coverage data file to avoid conflicts
data_file = "/tmp/.coverage"
source = [
    ".",
]
# Remove the include line that was causing the conflict
omit = [
    "tests/*",
    "setup.py",
    "*/__pycache__/*",
    "*/test_*",
    ".pytest_cache/*",
    "htmlcov/*",
]
# Run coverage relative to project root
relative_files = true

[tool.coverage.report]
# Ensure coverage report excludes test files and focuses on main code
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "except ImportError:",
    "except ModuleNotFoundError:",
]
# Set coverage thresholds
fail_under = 85
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
title = "SPDX Verify Test Coverage Report"
